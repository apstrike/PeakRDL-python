"""
peakrdl-python is a tool to generate Python Register Access Layer (RAL) from SystemRDL
Copyright (C) 2021 - 2023

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

This module is intended to distributed as part of automatically generated code by the
peakrdl-python tool. It provides a set of base classes used by the autogenerated code
"""
from typing import Dict

from .base import Base


class Memory(Base):
    """
    Simulation of a memory, this is implemented using a sparse approach to avoid the simulator
    storing every possible entry in a register map, which could be very big.
    """
    __slots__ = ['value', 'default_value', 'width', 'length']

    def __init__(self, *,
                 width: int,
                 length: int,
                 default_value: int,
                 full_inst_name: str):

        super().__init__(full_inst_name=full_inst_name)

        self.value: Dict[int, int] = {}
        self.default_value = default_value
        self.width = width
        self.length = length

    def read(self, offset: int) -> int:
        """
        Read a memory word

        Args:
            offset (int): Word offset in the memory

        Returns:
            memory word content

        """
        if offset in self.value:
            return self.value[offset]

        return self.default_value

    def write(self, offset: int, data: int) -> None:
        """
        Write a memory word

        Args:
            offset: (int): Word offset in the memory
            data: data word

        Returns:
            None

        """
        self.value[offset] = data

    @property
    def _width_in_bytes(self) -> int:
        return self.width >> 3

    def byte_offset_to_word_offset(self, byte_offset: int) -> int:
        """
        Determine a memory word offset

        Args:
            byte_offset (int): byte offset from memory start

        Returns:
            word offset

        """
        return byte_offset // self._width_in_bytes
