"""
peakrdl-python is a tool to generate Python Register Access Layer (RAL) from SystemRDL
Copyright (C) 2021 - 2023

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

This module is intended to distributed as part of automatically generated code by the
peakrdl-python tool. It provides a set of base classes used by the autogenerated code
"""
from abc import ABC, abstractmethod

from .memory import Memory

class BaseRegister(ABC):

    __slots__ = ['width', 'full_inst_name']
    def __init__(self, *,
                 width: int,
                 full_inst_name: str):
        self.width = width
        self.full_inst_name = full_inst_name

    @abstractmethod
    def read(self) -> int:
        """read the register value"""

    @abstractmethod
    def write(self, data: int) -> None:
        """write the register value"""
        ...


class Register(BaseRegister):

    __slots__ = ['value']

    def __init__(self, *,
                 width: int,
                 full_inst_name: str):
        super().__init__(width=width, full_inst_name=full_inst_name)
        self.value = 0

    def read(self)  -> int:
        return self.value

    def write(self, data) -> None:
        self.value = data

class MemoryRegister(BaseRegister):
    def __init__(self, *,
                 width: int,
                 full_inst_name: str,
                 memory: Memory,
                 memory_offset: int):
        super().__init__(width=width, full_inst_name=full_inst_name)
        self.memory = memory
        self.offset = memory_offset

    def read(self) -> int:
        return self.memory.read(self.offset)

    def write(self, data) -> None:
        self.memory.write(self.offset, data)





