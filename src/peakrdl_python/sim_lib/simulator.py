"""
peakrdl-python is a tool to generate Python Register Access Layer (RAL) from SystemRDL
Copyright (C) 2021 - 2023

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

This module is intended to distributed as part of automatically generated code by the
peakrdl-python tool. It provides a set of base classes used by the autogenerated code
"""
from abc import ABC, abstractmethod

from .register import Register
from .memory import Memory

class Simulator(ABC):

    def __init__(self, address: int):
        self._register_dict:dict[int, Register] = {}
        self._memory_dict:dict[int, Memory] = {}
        self._build_register_dict()
        self.address = address

    @abstractmethod
    def _build_register_dict(self) -> None:
        """

        """

    @abstractmethod
    def _build_memory_dict(self) -> None:
        """

        """

    def read(self, addr: int, width: int = 32, accesswidth: int = 32) -> int:
        """
        function to simulate a device read, this needs to match the protocol for the callbacks
        """
        # TODO deal with address not in the dictionary
        return self._register_dict[addr].read()


    def write(self, addr: int, data: int, width: int=32, accesswidth: int=32) -> None:
        """
        function to simulate a device write, this needs to match the protocol for the callbacks
        """
        # TODO deal with address not in the dictionary
        self._register_dict[addr].write(data)

