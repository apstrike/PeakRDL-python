{%- macro memory_class(node) %}
    {%- if is_mem_readable(node) and is_mem_writable(node) %}
class {{get_fully_qualified_type_name(node)}}_cls(MemoryReadWrite):
    {%- elif is_mem_readable(node) and not is_mem_writable(node) %}
class {{get_fully_qualified_type_name(node)}}_cls(MemoryReadOnly):
    {%- elif not is_mem_readable(node) and is_mem_writable(node) %}
class {{get_fully_qualified_type_name(node)}}_cls(MemoryWriteOnly):
    {%- endif %}
    """
    Class to represent a memory in the register model

    {{get_table_block(node) | indent}}
    """

    __slots__ = []

    def __init__(self,
                 callbacks: CallbackSet,
                 address: int,
                 logger_handle: str,
                 inst_name: str):

        super().__init__(callbacks=callbacks,
                         address=address,
                         entries={{node.get_property('mementries')}},
                         width={{node.get_property('memwidth')}},
                         logger_handle=logger_handle,
                         inst_name=inst_name)

{%- endmacro %}
