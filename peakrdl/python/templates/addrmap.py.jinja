{% if top_node.uses_enum %}from enum import IntEnum, unique{% endif %}
from typing import Tuple

from .peakrdl_python_types import AddressMap, Reg, RegFile
from .peakrdl_python_types import RegReadOnly, RegWriteOnly, RegReadWrite
from .peakrdl_python_types import FieldReadOnly, FieldWriteOnly, FieldReadWrite
from .peakrdl_python_types import read_callback_type, write_callback_type

{%- macro field_class(node) %}
    {% if node.is_sw_readable and node.is_sw_writable %}
class {{get_fully_qualified_type_name(node)}}_cls(FieldReadWrite):
    {% elif node.is_sw_readable and not node.is_sw_writable %}
class {{get_fully_qualified_type_name(node)}}_cls(FieldReadOnly):
    {% elif not node.is_sw_readable and node.is_sw_writable %}
class {{get_fully_qualified_type_name(node)}}_cls(FieldWriteOnly):
    {% endif %}

    {%- if 'encode' in node.list_properties() %}
    __enum_cls = {{get_fully_qualified_enum_type(node.get_property('encode'), top_node.parent)}}_enumcls
    {% endif %}

    __slots__ = []

    def __init__(self, parent_register: Reg,
                 lsb: int,
                 msb: int,
                 logger_handle: str):
        super().__init__(parent_register=parent_register,
                         lsb=lsb,
                         msb=msb,
                         logger_handle=logger_handle)

    {%- if 'encode' in node.list_properties() %}
    @classmethod
    @property
    def enum_cls(cls):
        return cls.__enum_cls

        {%- if node.is_sw_readable %}
    @classmethod
    def __reverse_enum_value_lookup(cls, int_value: int) -> {{get_fully_qualified_enum_type(node.get_property('encode'), top_node.parent)}}_enumcls:

        for potential_value in cls.__enum_cls:
            if int_value == potential_value.value:
                return potential_value
        else:
            raise('Unable to match value %d' % int_value)

    def read(self) -> {{get_fully_qualified_enum_type(node.get_property('encode'), top_node.parent)}}_enumcls:
        int_value = super().read()
        return self.__reverse_enum_value_lookup(int_value)
        {% endif %}

        {%- if node.is_sw_writable %}
    def write(self, value : {{get_fully_qualified_enum_type(node.get_property('encode'), top_node.parent)}}_enumcls):

        if not isinstance(value, self.enum_cls):
            raise TypeError('value must be an {{get_fully_qualified_enum_type(node.get_property('encode'), top_node.parent)}}_enumcls but got %s' % type(value))

        super().write(value.value)
        {% endif %}
    {% endif %}

{%- endmacro -%}

{%- macro register_class(node) %}
    {%- if node.has_sw_readable and node.has_sw_writable %}
class {{get_fully_qualified_type_name(node)}}_cls(RegReadWrite):
    {%- elif node.has_sw_readable and not node.has_sw_writable %}
class {{get_fully_qualified_type_name(node)}}_cls(RegReadOnly):
    {%- elif not node.has_sw_readable and node.has_sw_writable %}
class {{get_fully_qualified_type_name(node)}}_cls(RegWriteOnly):
    {%- endif %}

    __slots__ = [{%- for child_node in node.children(unroll=False) -%}'__{{get_inst_name(child_node)}}'{% if not loop.last %}, {% endif %}{%- endfor %}]

    {%- if node.has_sw_readable and node.has_sw_writable %}

    def __init__(self,
                 read_callback: read_callback_type,
                 write_callback: write_callback_type,
                 logger_handle,
                 base_address,
                 address_width,
                 data_width):

        super().__init__(read_callback=read_callback,
                         write_callback=write_callback,
                         base_address=base_address,
                         address_width=address_width,
                         data_width=data_width,
                         logger_handle=logger_handle)
    {%- elif node.has_sw_readable and not node.has_sw_writable %}

    def __init__(self,
                 read_callback: read_callback_type,
                 logger_handle,
                 base_address={{top_node.absolute_address}},
                 address_width=32,
                 data_width=32):

        super().__init__(read_callback=read_callback,
                         base_address=base_address,
                         address_width=address_width,
                         data_width=data_width,
                         logger_handle=logger_handle)
    {%- elif not node.has_sw_readable and node.has_sw_writable %}

    def __init__(self,
                 write_callback: write_callback_type,
                 logger_handle,
                 base_address={{top_node.absolute_address}},
                 address_width=32,
                 data_width=32):

        super().__init__(write_callback=write_callback,
                         base_address=base_address,
                         address_width=address_width,
                         data_width=data_width,
                         logger_handle=logger_handle)
    {%- endif %}

        # build the field attributes
        {%- for child_node in node.fields() %}
            {%- if isinstance(child_node, systemrdlFieldNode) %}
        self.__{{get_inst_name(child_node)}} = {{get_fully_qualified_type_name(child_node)}}_cls(parent_register=self,
                                                                                 lsb={{child_node.lsb}},
                                                                                 msb={{child_node.msb}},
                                                                                 logger_handle=logger_handle+'.{{get_inst_name(child_node)}}')
            {%- endif -%}
        {%- endfor %}

    # build the properties for the fields
    {%- for child_node in node.children(unroll=False) -%}
        {%- if isinstance(child_node, systemrdlFieldNode) %}
    @property
    def {{get_inst_name(child_node)}}(self) -> {{get_fully_qualified_type_name(child_node)}}_cls:
        return self.__{{get_inst_name(child_node)}}
        {% endif %}
    {%- endfor %}

{%- endmacro %}

{%- macro regfile_or_addr_instance(node) %}
    {%- if isinstance(node, systemrdlRegNode) %}
        {%- if node.is_array %}
            {%- if node.has_sw_readable and node.has_sw_writable %}
    self.__{{get_inst_name(node)}} = ( {% for node_instance_index in range(get_array_dim(node))  %}
                                       {{get_fully_qualified_type_name(node)}}_cls(read_callback=read_callback,
                                                                   write_callback=write_callback,
                                                                   base_address=base_address+{{node.raw_address_offset}}+({{node_instance_index}} * {{node.array_stride}}),
                                                                   address_width=self.address_width,data_width=self.data_width,
                                                                   logger_handle=logger_handle+'.{{get_inst_name(node)}}[{{node_instance_index}}]')
                                       {%- if not loop.last -%} ,  {%- endif -%}
                                       {% endfor %} )
            {%- elif node.has_sw_readable and not node.has_sw_writable %}
    self.__{{get_inst_name(node)}} = ( {% for node_instance_index in range(get_array_dim(node))  %}
                                       {{get_fully_qualified_type_name(node)}}_cls(read_callback=read_callback,
                                                                   base_address=base_address+{{node.raw_address_offset}}+({{node_instance_index}} * {{node.array_stride}}),
                                                                   address_width=self.address_width,
                                                                   data_width=self.data_width,
                                                                   logger_handle=logger_handle+'.{{get_inst_name(node)}}[{{node_instance_index}}]')
                                       {%- if not loop.last -%} ,  {%- endif -%}
                                       {% endfor %} )
            {%- elif not node.has_sw_readable and node.has_sw_writable %}
    self.__{{get_inst_name(node)}} = ( {% for node_instance_index in range(get_array_dim(node))  %}
                                       {{get_fully_qualified_type_name(node)}}_cls(write_callback=write_callback,
                                                                   base_address=base_address+{{node.raw_address_offset}}+({{node_instance_index}} * {{node.array_stride}}),
                                                                   address_width=self.address_width,
                                                                   data_width=self.data_width,
                                                                   logger_handle=logger_handle+'.{{get_inst_name(node)}}[{{node_instance_index}}]')
                                       {%- if not loop.last -%} ,  {%- endif -%}
                                       {% endfor %} )
            {%- endif %}
        {%- else %}
            {%- if node.has_sw_readable and node.has_sw_writable %}
    self.__{{get_inst_name(node)}} = {{get_fully_qualified_type_name(node)}}_cls(read_callback=read_callback,
                                                                 write_callback=write_callback,
                                                                 base_address=base_address+{{node.address_offset}},
                                                                 address_width=self.address_width,
                                                                 data_width=self.data_width,
                                                                 logger_handle=logger_handle+'.{{get_inst_name(node)}}')
            {%- elif node.has_sw_readable and not node.has_sw_writable %}
    self.__{{get_inst_name(node)}} = {{get_fully_qualified_type_name(node)}}_cls(read_callback=read_callback,
                                                                 base_address=base_address+{{node.address_offset}},
                                                                 address_width=self.address_width,
                                                                 data_width=self.data_width,
                                                                 logger_handle=logger_handle+'.{{get_inst_name(node)}}')
            {%- elif not node.has_sw_readable and node.has_sw_writable %}
    self.__{{get_inst_name(node)}} = {{get_fully_qualified_type_name(node)}}_cls(write_callback=write_callback,
                                                                                 base_address=base_address+{{node.address_offset}},
                                                                                 address_width=self.address_width,
                                                                                 data_width=self.data_width,
                                                                                 logger_handle=logger_handle+'.{{get_inst_name(node)}}')
            {%- endif %}
        {%- endif %}
    {%- elif isinstance(node, systemrdlRegfileNode) or isinstance(node, systemrdlAddrmapNode) %}
        {%- if node.is_array %}
    self.__{{get_inst_name(node)}} = ( {% for node_instance_index in range(get_array_dim(node))  %}
                                       {{get_fully_qualified_type_name(node)}}_cls(read_callback=read_callback,
                                                                                   write_callback=write_callback,
                                                                                   base_address=base_address+{{node.raw_address_offset}}+({{node_instance_index}} * {{node.array_stride}}),
                                                                                   address_width=self.address_width,
                                                                                   data_width=self.data_width,
                                                                                   logger_handle=logger_handle+'.{{get_inst_name(node)}}[{{node_instance_index}}]')
                                       {%- if not loop.last -%} ,  {%- endif -%}
                                       {% endfor %} )
        {%- else -%}
    self.__{{get_inst_name(node)}} = {{get_fully_qualified_type_name(node)}}_cls(read_callback=read_callback,
                                                                                 write_callback=write_callback,
                                                                                 base_address=base_address+{{node.address_offset}},
                                                                                 address_width=self.address_width,
                                                                                 data_width=self.data_width,
                                                                                 logger_handle=logger_handle+'.{{get_inst_name(node)}}')
        {%- endif %}
    {%- endif %}
{%- endmacro %}

{%- macro regfile_class(node) %}
class {{get_fully_qualified_type_name(node)}}_cls(RegFile):

    __slots__ = [{%- for child_node in node.children(unroll=False) -%}'__{{get_inst_name(child_node)}}'{% if not loop.last %}, {% endif %}{%- endfor %}]

    def __init__(self,
                 read_callback: read_callback_type,
                 write_callback: write_callback_type,
                 logger_handle:str,
                 base_address:int,
                 address_width=32,
                 data_width=32):

        super().__init__(base_address=base_address,
                         address_width=address_width,
                         data_width=data_width,
                         logger_handle=logger_handle)

        # instance of objects within the class
        {%- for child_node in node.children(unroll=False) -%}
            {{ regfile_or_addr_instance(child_node) | indent(8) }}
        {%- endfor %}

    # properties for Register and RegisterFiles
    {%- for child_node in node.children(unroll=False) %}
        {%- if isinstance(child_node, systemrdlRegNode) or isinstance(child_node, systemrdlRegfileNode) %}
    @property
    def {{get_inst_name(child_node)}}(self) -> {%- if child_node.is_array -%}Tuple[{%- endif -%}{{get_fully_qualified_type_name(child_node)}}_cls{%- if child_node.is_array -%}, ...]{%- endif -%}:
        return self.__{{get_inst_name(child_node)}}
        {%- endif %}
    {% endfor %}

{%- endmacro %}

{%- macro addrmap_class(node) %}
class {{get_fully_qualified_type_name(node)}}_cls(AddressMap):

    __slots__ = [{%- for child_node in node.children(unroll=False) -%}{%- if isinstance(child_node, systemrdlRegNode) or isinstance(child_node, systemrdlRegfileNode) or isinstance(child_node, systemrdlAddrmapNode) -%}'__{{get_inst_name(child_node)}}'{% if not loop.last %}, {% endif %}{% endif %}{%- endfor %}]

    def __init__(self,
                 read_callback: read_callback_type,
                 write_callback: write_callback_type,
                 base_address:int {%- if node == top_node -%}={{top_node.absolute_address}}{%- endif -%},
                 logger_handle:str {%- if node == top_node -%}='reg_model.{{top_node.get_path()}}'{%- endif -%},
                 address_width=32,
                 data_width=32):

        super().__init__(base_address=base_address,
                         address_width=address_width,
                         data_width=data_width,
                         logger_handle=logger_handle)

        {% for child_node in node.children(unroll=False) -%}
            {{ regfile_or_addr_instance(child_node) | indent }}
        {% endfor %}

        {%- for child_node in node.children(unroll=False) -%}
            {%- if isinstance(child_node, systemrdlRegNode) or isinstance(child_node, systemrdlRegfileNode) or isinstance(child_node, systemrdlAddrmapNode) %}
    @property
    def {{get_inst_name(child_node)}}(self) ->  {%- if child_node.is_array -%}Tuple[{%- endif -%}{{get_fully_qualified_type_name(child_node)}}_cls{%- if child_node.is_array -%},...]{%- endif -%}:
        return self.__{{get_inst_name(child_node)}}
            {%- endif %}
        {% endfor %}
{%- endmacro %}

{% if top_node.uses_enum %}
# root level enum definitions
{%- for enum_needed in get_dependent_enum(top_node.parent) %}
@unique
class {{get_fully_qualified_enum_type(enum_needed, top_node.parent)}}_enumcls(IntEnum):

    {% for value_of_enum_needed in enum_needed -%}
    {{ value_of_enum_needed.name }} = {{ value_of_enum_needed.value }}  {%- if value_of_enum_needed.rdl_desc is not none -%}# {{ value_of_enum_needed.rdl_desc }} {%- endif %}
    {% endfor %}
{% endfor -%}
{% endif %}


# regfile, register and field definitions
{%- for node in get_dependent_component(top_node.parent) -%}
    {% if isinstance(node, systemrdlRegNode) %}
        {{ register_class(node)  }}
    {% elif isinstance(node, systemrdlRegfileNode) %}
        {{ regfile_class(node) }}
    {% elif isinstance(node, systemrdlAddrmapNode) %}
        {{ addrmap_class(node) }}
    {% elif isinstance(node, systemrdlFieldNode) %}
        {{ field_class(node)  }}
    {% endif %}
{% endfor %}


if __name__ == '__main__':
    {{get_inst_name(top_node)}} = {{get_fully_qualified_type_name(top_node)}}_cls()
