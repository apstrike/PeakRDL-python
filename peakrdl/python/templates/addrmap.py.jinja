{% if top_node.uses_enum %}from enum import IntEnum, unique{% endif %}

from .peakrdl_python_types import AddressMap, Reg, RegFile
from .peakrdl_python_types import RegReadOnly, RegWriteOnly, RegReadWrite
from .peakrdl_python_types import FieldReadOnly, FieldWriteOnly, FieldReadWrite
{% if top_node.uses_enum %}from .peakrdl_python_types import EnumFieldReadOnly, EnumFieldReadWrite{% endif %}
from .peakrdl_python_types import read_callback_type, write_callback_type

{%- macro enum_definitions(node) %}
# enums needed
    {%- for enum_needed in get_unique_scoped_enums(node) %}
@unique
class {{enum_needed.__name__}}(IntEnum):

    {% for value_of_enum_needed in enum_needed -%}
    {{ value_of_enum_needed.name }} = {{ value_of_enum_needed.value }}
    {% endfor %}
    {% endfor -%}
{%- endmacro -%}

{%- macro field_class(node) %}
    {%- if 'encode' in node.list_properties() %}
        {% if node.is_sw_readable and node.is_sw_writable %}
class {{get_inst_name(node)}}_cls(EnumFieldReadWrite):
        {% elif node.is_sw_readable and not node.is_sw_writable %}
class {{get_inst_name(node)}}_cls(EnumFieldReadOnly):
        {% elif not node.is_sw_readable and node.is_sw_writable %}
class {{get_inst_name(node)}}_cls(EnumFieldWriteOnly):
        {% endif %}

    __slots__ = [{%- for child_node in node.children(unroll=False) -%}'__{{get_inst_name(child_node)}}'{% if not loop.last %}, {% endif %}{%- endfor %}]

    def __init__(self,
                 parent_register: Reg,
                 logger_handle: str):
        super().__init__(parent_register=parent_register,
                         lsb={{node.lsb}},
                         msb={{node.msb}},
                         encoding_enum={{node.get_property('encode').__name__}},
                         logger_handle=logger_handle)
    {% else %}
        {% if node.is_sw_readable and node.is_sw_writable %}
class {{get_inst_name(node)}}_cls(FieldReadWrite):
        {% elif node.is_sw_readable and not node.is_sw_writable %}
class {{get_inst_name(node)}}_cls(FieldReadOnly):
        {% elif not node.is_sw_readable and node.is_sw_writable %}
class {{get_inst_name(node)}}_cls(FieldWriteOnly):
        {% endif %}

    __slots__ = [{%- for child_node in node.children(unroll=False) -%}'__{{get_inst_name(child_node)}}'{% if not loop.last %}, {% endif %}{%- endfor %}]

    def __init__(self, parent_register: Reg, logger_handle: str):
        super().__init__(parent_register=parent_register,
                         lsb={{node.lsb}},
                         msb={{node.msb}},
                         logger_handle=logger_handle)
    {% endif %}
{%- endmacro -%}

{%- macro register_class(node) %}
    {%- if node.has_sw_readable and node.has_sw_writable %}
    class {{get_type_name(node)}}_cls(RegReadWrite):
    {%- elif node.has_sw_readable and not node.has_sw_writable %}
    class {{get_type_name(node)}}_cls(RegReadOnly):
    {%- elif not node.has_sw_readable and node.has_sw_writable %}
    class {{get_type_name(node)}}_cls(RegWriteOnly):
    {%- endif %}

        __slots__ = [{%- for child_node in node.children(unroll=False) -%}'__{{get_inst_name(child_node)}}'{% if not loop.last %}, {% endif %}{%- endfor %}]

    {%- if node.has_sw_readable and node.has_sw_writable %}

        def __init__(self,
                     read_callback: read_callback_type,
                     write_callback: write_callback_type,
                     logger_handle,
                     base_address={{top_node.absolute_address}},
                     address_width=32,
                     data_width=32):

            super().__init__(read_callback=read_callback,
                             write_callback=write_callback,
                             base_address=base_address,
                             address_width=address_width,
                             data_width=data_width,
                             logger_handle=logger_handle)
    {%- elif node.has_sw_readable and not node.has_sw_writable %}

        def __init__(self,
                     read_callback: read_callback_type,
                     logger_handle,
                     base_address={{top_node.absolute_address}},
                     address_width=32,
                     data_width=32):

            super().__init__(read_callback=read_callback,
                             base_address=base_address,
                             address_width=address_width,
                             data_width=data_width,
                             logger_handle=logger_handle)
    {%- elif not node.has_sw_readable and node.has_sw_writable %}

        def __init__(self,
                     write_callback: write_callback_type,
                     logger_handle,
                     base_address={{top_node.absolute_address}},
                     address_width=32,
                     data_width=32):

            super().__init__(write_callback=write_callback,
                             base_address=base_address,
                             address_width=address_width,
                             data_width=data_width,
                             logger_handle=logger_handle)
    {%- endif %}

            {{ enum_definitions(node) | indent(12) }}

            # classes used within the register
            {%- for child_node in get_unique_scoped_component(node) -%}
                {%- if isinstance(child_node, systemrdlFieldNode) -%}
                    {{ field_class(child_node) | indent(12) }}
                {%- endif -%}
            {%- endfor %}

            # build the field attributes
            {%- for child_node in node.fields() %}
                {%- if isinstance(child_node, systemrdlFieldNode) %}
            self.__{{get_inst_name(child_node)}} = {{get_inst_name(child_node)}}_cls(parent_register=self,
                                                                                     logger_handle=logger_handle+'{{get_inst_name(child_node)}}')
                {%- endif -%}
            {%- endfor %}

        # build the properties for the fields
        {%- for child_node in node.children(unroll=False) -%}
            {%- if isinstance(child_node, systemrdlFieldNode) %}
        @property
        def {{get_inst_name(child_node)}}(self):
            return self.__{{get_inst_name(child_node)}}
            {% endif %}
        {%- endfor %}

{%- endmacro %}

{%- macro regfile_or_addr_instance(node) %}
    {%- if isinstance(node, systemrdlRegNode) %}
        {%- if node.is_array %}
            {%- if node.has_sw_readable and node.has_sw_writable %}
    self.__{{get_inst_name(node)}} = ( {% for node_instance_index in range(get_array_dim(node))  %}
                                       {{get_type_name(node)}}_cls(read_callback=read_callback,
                                                                   write_callback=write_callback,
                                                                   base_address=base_address+{{node.raw_address_offset}}+({{node_instance_index}} * {{node.array_stride}}),
                                                                   address_width=self.address_width,data_width=self.data_width,
                                                                   logger_handle=logger_handle+'{{get_inst_name(node)}}[{{node_instance_index}}]')
                                       {%- if not loop.last -%} ,  {%- endif -%}
                                       {% endfor %} )
            {%- elif node.has_sw_readable and not node.has_sw_writable %}
    self.__{{get_inst_name(node)}} = ( {% for node_instance_index in range(get_array_dim(node))  %}
                                       {{get_type_name(node)}}_cls(read_callback=read_callback,
                                                                   base_address=base_address+{{node.raw_address_offset}}+({{node_instance_index}} * {{node.array_stride}}),
                                                                   address_width=self.address_width,
                                                                   data_width=self.data_width,
                                                                   logger_handle=logger_handle+'{{get_inst_name(node)}}[{{node_instance_index}}]')
                                       {%- if not loop.last -%} ,  {%- endif -%}
                                       {% endfor %} )
            {%- elif not node.has_sw_readable and node.has_sw_writable %}
    self.__{{get_inst_name(node)}} = ( {% for node_instance_index in range(get_array_dim(node))  %}
                                       {{get_type_name(node)}}_cls(write_callback=write_callback,
                                                                   base_address=base_address+{{node.raw_address_offset}}+({{node_instance_index}} * {{node.array_stride}}),
                                                                   address_width=self.address_width,
                                                                   data_width=self.data_width,
                                                                   logger_handle=logger_handle+'{{get_inst_name(node)}}[{{node_instance_index}}]')
                                       {%- if not loop.last -%} ,  {%- endif -%}
                                       {% endfor %} )
            {%- endif %}
        {%- else %}
            {%- if node.has_sw_readable and node.has_sw_writable %}
    self.__{{get_inst_name(node)}} = {{get_type_name(node)}}_cls(read_callback=read_callback,
                                                                 write_callback=write_callback,
                                                                 base_address=base_address+{{node.address_offset}},
                                                                 address_width=self.address_width,
                                                                 data_width=self.data_width,
                                                                 logger_handle=logger_handle+'{{get_inst_name(node)}}')
            {%- elif node.has_sw_readable and not node.has_sw_writable %}
    self.__{{get_inst_name(node)}} = {{get_type_name(node)}}_cls(read_callback=read_callback,
                                                                 base_address=base_address+{{node.address_offset}},
                                                                 address_width=self.address_width,
                                                                 data_width=self.data_width,
                                                                 logger_handle=logger_handle+'{{get_inst_name(node)}}')
            {%- elif not node.has_sw_readable and node.has_sw_writable %}
    self.__{{get_inst_name(node)}} = {{get_type_name(node)}}_cls(write_callback=write_callback, base_address=base_address+{{node.address_offset}},address_width=self.address_width,data_width=self.data_width, logger_handle=logger_handle+'{{get_inst_name(node)}}')
            {%- endif %}
        {%- endif %}
    {%- elif isinstance(node, systemrdlRegfileNode) %}
        {%- if node.is_array %}
    self.__{{get_inst_name(node)}} = ( {% for node_instance_index in range(get_array_dim(node))  %}
                                       {{get_inst_name(node)}}_cls(read_callback=read_callback, write_callback=write_callback, base_address=base_address+{{node.raw_address_offset}}+({{node_instance_index}} * {{node.array_stride}}),address_width=self.address_width,data_width=self.data_width, logger_handle=logger_handle+'{{get_inst_name(node)}}[{{node_instance_index}}]')
                                       {%- if not loop.last -%} ,  {%- endif -%}
                                       {% endfor %} )
        {%- else -%}
    self.__{{get_inst_name(node)}} = {{get_type_name(node)}}_cls(read_callback=read_callback, write_callback=write_callback, base_address=base_address+{{node.address_offset}},address_width=self.address_width,data_width=self.data_width, logger_handle=logger_handle+'{{get_inst_name(node)}}')
        {%- endif %}
    {%- endif %}
{%- endmacro %}

{%- macro regfile_class(node) %}
    class {{get_inst_name(node)}}_cls(RegFile):

        __slots__ = [{%- for child_node in node.children(unroll=False) -%}'__{{get_inst_name(child_node)}}'{% if not loop.last %}, {% endif %}{%- endfor %}]

        def __init__(self,
                     read_callback: read_callback_type,
                     write_callback: write_callback_type,
                     logger_handle,
                     base_address={{top_node.absolute_address}},
                     address_width=32,
                     data_width=32):

            super().__init__(base_address=base_address,
                             address_width=address_width,
                             data_width=data_width,
                             logger_handle=logger_handle)

            {{ enum_definitions(node) | indent(12) }}

            # classes used within the register
            {%- for child_node in get_unique_scoped_component(node) -%}
                {# only declare types if they are initially created at this level #}
                {%- if isinstance(child_node, systemrdlRegNode) -%}
                    {{ register_class(child_node) | indent(8) }}
                {%- elif isinstance(child_node, systemrdlRegfileNode) -%}
                    {{ regfile_class(child_node) | indent(8) }}
                {%- elif isinstance(child_node, systemrdlFieldNode) -%}
                    {{ field_class(child_node) | indent(12) }}
                {%- endif -%}
            {%- endfor -%}

            # instance of objects within the class
            {%- for child_node in node.children(unroll=False) -%}
                {{ regfile_or_addr_instance(child_node) | indent(8) }}
            {%- endfor %}

        # properties for Register and RegisterFiles
        {%- for child_node in node.children(unroll=False) %}
            {%- if isinstance(child_node, systemrdlRegNode) or isinstance(child_node, systemrdlRegfileNode) %}
        @property
        def {{get_inst_name(child_node)}}(self):
            return self.__{{get_inst_name(child_node)}}
            {%- endif %}
        {% endfor %}

{%- endmacro %}

# root level enum definitions
{{ enum_definitions(top_node.parent)  }}

# root level regfile, register and feild definitions
{%- for node in get_unique_scoped_component(top_node.parent) -%}
    {% if isinstance(node, systemrdlRegNode) %}
        {{ register_class(node)  }}
    {% elif isinstance(node, systemrdlRegfileNode) %}
        {{ regfile_class(node) }}
    {% elif isinstance(node, systemrdlFieldNode) %}
        {{ field_class(node)  }}
    {% endif %}
{% endfor %}

class {{get_type_name(top_node)}}_cls(AddressMap):

    __slots__ = [{%- for node in top_node.children(unroll=False) -%}{%- if isinstance(node, systemrdlRegNode) or isinstance(node, systemrdlRegfileNode)  -%}'__{{get_inst_name(node)}}'{% if not loop.last %}, {% endif %}{% endif %}{%- endfor %}]

    def __init__(self,
                 read_callback: read_callback_type,
                 write_callback: write_callback_type,
                 base_address={{top_node.absolute_address}}):

        logger_handle = 'reg_model.{{top_node.get_path()}}'

        super().__init__(base_address=base_address,
                         address_width=32,
                         data_width=32,
                         logger_handle=logger_handle)

        {{ enum_definitions(top_node) | indent(8) }}

        {%- for node in get_unique_scoped_component(top_node) -%}
            {% if isinstance(node, systemrdlRegNode) %}
                {{ register_class(node) | indent }}
            {% elif isinstance(node, systemrdlRegfileNode) %}
                {{ regfile_class(node) | indent }}
            {% elif isinstance(node, systemrdlFieldNode) %}
                {{ field_class(node) | indent(8) }}
            {% endif %}
        {% endfor %}

        {% for node in top_node.children(unroll=False) -%}
            {{ regfile_or_addr_instance(node) | indent }}
        {% endfor %}

        {%- for node in top_node.children(unroll=False) -%}
            {%- if isinstance(node, systemrdlRegNode) or isinstance(node, systemrdlRegfileNode) %}
    @property
    def {{get_inst_name(node)}}(self):
        return self.__{{get_inst_name(node)}}
            {%- endif %}
        {% endfor %}

if __name__ == '__main__':
    {{get_inst_name(top_node)}} = {{get_type_name(top_node)}}_cls()
